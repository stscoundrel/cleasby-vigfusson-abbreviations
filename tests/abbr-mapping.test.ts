import abbreviations from '../src';

describe('Abbreviation mapping tests', () => {
  test('Returns map of abbreviations to words / definitions', () => {
    const resultMap = abbreviations.getAbbreviationMapping();

    expect(typeof resultMap).toBe('object');
    expect(resultMap instanceof Map).toBeTruthy();
  });

  test('Abbreviations in map expected content', () => {
    const resultMap = abbreviations.getAbbreviationMapping();

    expect(resultMap.get('absol.')).toBe('absolute, absolutely.');
    expect(resultMap.get('acc.')).toBe('accusative.');
    expect(resultMap.get('act.')).toBe('active.');
    expect(resultMap.get('A. D.')).toBe('Anno Domini.');
    expect(resultMap.get('adj.')).toBe('adjective.');
    expect(resultMap.get('adv.')).toBe('adverb.');
    expect(resultMap.get('adverb.')).toBe('adverbially.');
    expect(resultMap.get('allit.')).toBe('alliteration, alliterative.');
    expect(resultMap.get('natom.')).toBe('anatomically.');
    expect(resultMap.get('απ. λεγ.')).toBe('απαξ. λεγόμενον.');
    expect(resultMap.get('A. S.')).toBe('Anglo-Saxon.');
    expect(resultMap.get('astron.')).toBe('astronomy, astronomically.');
    expect(resultMap.get('begin.')).toBe('beginning.');
    expect(resultMap.get('Bodl.')).toBe('Bodleian.');
    expect(resultMap.get('Bohem.')).toBe('Bohemian.');
    expect(resultMap.get('botan.')).toBe('botanically.');
    expect(resultMap.get('Brit. Mus.')).toBe('British Museum.');
    expect(resultMap.get('ch.')).toBe('chapter.');
    expect(resultMap.get('class.')).toBe('classical.');
    expect(resultMap.get('Cod. or Cd.')).toBe('Codex.');
    expect(resultMap.get('cognom.')).toBe('cognomen.');
    expect(resultMap.get('collect.')).toBe('collective.');
    expect(resultMap.get('compar.')).toBe('comparative.');
    expect(resultMap.get('conj.')).toBe('conjunction.');
    expect(resultMap.get('contr.')).toBe('contracted.');
    expect(resultMap.get('corresp.')).toBe('corresponding.');
    expect(resultMap.get('cp.')).toBe('compare.');
    expect(resultMap.get('Dan.')).toBe('Danish.');
    expect(resultMap.get('dat.')).toBe('dative.');
    expect(resultMap.get('decl.')).toBe('declined.');
    expect(resultMap.get('def.')).toBe('definite.');
    expect(resultMap.get('defect.')).toBe('defective.');
    expect(resultMap.get('dep.')).toBe('deponent.');
    expect(resultMap.get('DeProfesser')).toBe('De Herr Professer by August Corrodi, in the Zürich idiom.');
    expect(resultMap.get('deriv.')).toBe('derived.');
    expect(resultMap.get('dict.')).toBe('dictionary.');
    expect(resultMap.get('dimin.')).toBe('diminutive.');
    expect(resultMap.get('dissyl.')).toBe('dissyllabic.');
    expect(resultMap.get('D. R. A.')).toBe('Deutsche Rechts-alterthümer by Grimm.');
    expect(resultMap.get('dub.')).toBe('dubious.');
    expect(resultMap.get('eccl.')).toBe('ecclesiastical.');
    expect(resultMap.get('Ed., Edd.')).toBe('edition, editions, edited.');
    expect(resultMap.get('E. Engl. Spec.')).toBe('Early English Specimens.');
    expect(resultMap.get('e. g.')).toBe('exempli gratia.');
    expect(resultMap.get('ellipt.')).toBe('elliptical, elliptically.');
    expect(resultMap.get('Engl.')).toBe('English.');
    expect(resultMap.get('esp.')).toBe('especially.');
    expect(resultMap.get('etc.')).toBe('et cetera.');
    expect(resultMap.get('etym.')).toBe('etymology.');
    expect(resultMap.get('f.')).toBe('feminine.');
    expect(resultMap.get('fem.')).toBe('feminine.');
    expect(resultMap.get('Fin.')).toBe('Finnish.');
    expect(resultMap.get('for.')).toBe('foreign.');
    expect(resultMap.get('Fr.')).toBe('French in etymologies.');
    expect(resultMap.get('Frank.')).toBe('Frankish.');
    expect(resultMap.get('freq.')).toBe('frequent, frequently.');
    expect(resultMap.get('Fris.')).toBe('Frisian.');
    expect(resultMap.get('Gael.')).toBe('Gaelic.');
    expect(resultMap.get('gen.')).toBe('genitive.');
    expect(resultMap.get('gener.')).toBe('generally.');
    expect(resultMap.get('Germ.')).toBe('German.');
    expect(resultMap.get('gl.')).toBe('glossary.');
    expect(resultMap.get('gloss.')).toBe('glossary.');
    expect(resultMap.get('Goth.')).toBe('Gothic.');
    expect(resultMap.get('Gr.')).toBe('Greek.');
    expect(resultMap.get('gramm.')).toBe('grammar.');
    expect(resultMap.get('Havn.')).toBe('Havniensis.');
    expect(resultMap.get('Hel.')).toBe('Heliand.');
    expect(resultMap.get('Icel.')).toBe('Iceland, Icelander, Icelanders, Icelandic.');
    expect(resultMap.get('id.')).toBe('idem, referring to the passage quoted or to the translation');
    expect(resultMap.get('i. e.')).toBe('id est.');
    expect(resultMap.get('imperat.')).toBe('imperative.');
    expect(resultMap.get('impers.')).toBe('impersonal.');
    expect(resultMap.get('indecl.')).toBe('indeclinable.');
    expect(resultMap.get('indef.')).toBe('indefinite.');
    expect(resultMap.get('indic.')).toBe('indicative.');
    expect(resultMap.get('infin.')).toBe('infinitive.');
    expect(resultMap.get('inflex.')).toBe('inflexive.');
    expect(resultMap.get('intens.')).toBe('intensive.');
    expect(resultMap.get('intrans.')).toBe('intransitive.');
    expect(resultMap.get('irreg.')).toBe('irregular.');
    expect(resultMap.get('Ital.')).toBe('Italian.');
    expect(resultMap.get('l.')).toBe('line.');
    expect(resultMap.get('L.')).toBe('Linnæus.');
    expect(resultMap.get('Lat.')).toBe('Latin.');
    expect(resultMap.get('l. c.')).toBe('loco citato.');
    expect(resultMap.get('lit.')).toBe('literally.');
    expect(resultMap.get('Lith.')).toBe('Lithuanian.');
    expect(resultMap.get('Litt.')).toBe('Littonian.');
    expect(resultMap.get('loc.')).toBe('local, locally.');
    expect(resultMap.get('m.')).toBe('masculine.');
    expect(resultMap.get('masc.')).toBe('masculine.');
    expect(resultMap.get('medic.')).toBe('medicine, medically.');
    expect(resultMap.get('metaph.')).toBe('metaphorical, metaphorically.');
    expect(resultMap.get('metath.')).toBe('metathesis.');
    expect(resultMap.get('meton.')).toBe('metonomy, metonomically.');
    expect(resultMap.get('metric.')).toBe('metrically.');
    expect(resultMap.get('mid. H. G.')).toBe('middle High German.');
    expect(resultMap.get('mid. Lat.')).toBe('middle Latin.');
    expect(resultMap.get('milit.')).toBe('military.');
    expect(resultMap.get('M. Lat.')).toBe('Mediæval Latin.');
    expect(resultMap.get('mod.')).toBe('modern.');
    expect(resultMap.get('monosyl.')).toBe('monosyllabic.');
    expect(resultMap.get('MS., MSS.')).toBe('manuscript, manuscripts.');
    expect(resultMap.get('mythol.')).toBe('mythology, mythologically.');
    expect(resultMap.get('n.')).toBe('neuter.');
    expect(resultMap.get('neut.')).toBe('neuter.');
    expect(resultMap.get('naut.')).toBe('nautical.');
    expect(resultMap.get('navig.')).toBe('navigation.');
    expect(resultMap.get('neg.')).toBe('negative.');
    expect(resultMap.get('N. H. G.')).toBe('New High German.');
    expect(resultMap.get('no.')).toBe('number.');
    expect(resultMap.get('nom.')).toBe('nominative.');
    expect(resultMap.get('North. E.')).toBe('Northern English.');
    expect(resultMap.get('Norweg.')).toBe('Norwegian.');
    expect(resultMap.get('obsol.')).toBe('obsolete.');
    expect(resultMap.get('O. H. G.')).toBe('Old High German.');
    expect(resultMap.get('opp.')).toBe('opposed.');
    expect(resultMap.get('Ormul..')).toBe('Ormulum.');
    expect(resultMap.get('Orm.')).toBe('Ormulum.');
    expect(resultMap.get('part.')).toBe('participle.');
    expect(resultMap.get('partic.')).toBe('particularly.');
    expect(resultMap.get('pass.')).toBe('passive.');
    expect(resultMap.get('perh.')).toBe('perhaps.');
    expect(resultMap.get('pers.')).toBe('person.');
    expect(resultMap.get('pl.')).toBe('plural.');
    expect(resultMap.get('plur.')).toBe('plural.');
    expect(resultMap.get('poët.')).toBe('poetically.');
    expect(resultMap.get('Pol.')).toBe('Polish.');
    expect(resultMap.get('posit.')).toBe('positive.');
    expect(resultMap.get('pr.')).toBe('proper, properly.');
    expect(resultMap.get('prop.')).toBe('proper, properly.');
    expect(resultMap.get('pref.')).toBe('preface.');
    expect(resultMap.get('prep., prepp.')).toBe('preposition, prepositions.');
    expect(resultMap.get('pres.')).toBe('present.');
    expect(resultMap.get('pret.')).toBe('preterite.');
    expect(resultMap.get('priv.')).toBe('privative.');
    expect(resultMap.get('pr. n.')).toBe('proper name.');
    expect(resultMap.get('prob.')).toBe('probably.');
    expect(resultMap.get('pron.')).toBe('pronoun.');
    expect(resultMap.get('proncd.')).toBe('pronounced.');
    expect(resultMap.get('proverb.')).toBe('proverbially.');
    expect(resultMap.get('provinc.')).toBe('provincial.');
    expect(resultMap.get('qs.')).toBe('quasi.');
    expect(resultMap.get('q. v.')).toBe('quod vide.');
    expect(resultMap.get('R.')).toBe('Rimur.');
    expect(resultMap.get('recipr.')).toBe('reciprocally.');
    expect(resultMap.get('redupl.')).toBe('reduplicative.');
    expect(resultMap.get('reflex.')).toBe('retlexive.');
    expect(resultMap.get('relat.')).toBe('relative.');
    expect(resultMap.get('S.')).toBe('Saga.');
    expect(resultMap.get('s. a.')).toBe('sub anno.');
    expect(resultMap.get('Sansk.')).toBe('Sanskrit.');
    expect(resultMap.get('Scandin.')).toBe('Scandinavia, Scandinavian.');
    expect(resultMap.get('Scot.')).toBe('Scottish.');
    expect(resultMap.get('signif.')).toBe('signification.');
    expect(resultMap.get('sing.')).toBe('singular.');
    expect(resultMap.get('Slav.')).toBe('Slavonic.');
    expect(resultMap.get('Span.')).toBe('Spanish.');
    expect(resultMap.get('spec.')).toBe('specially.');
    expect(resultMap.get('sq., sqq.')).toBe('following.');
    expect(resultMap.get('subj.')).toBe('subjunctive.');
    expect(resultMap.get('subst.')).toBe('substantive.');
    expect(resultMap.get('uff.')).toBe('suffix.');
    expect(resultMap.get('sup.')).toBe('supine.');
    expect(resultMap.get('superl.')).toBe('superlative.');
    expect(resultMap.get('s. v.')).toBe('sub voce.');
    expect(resultMap.get('Swed.')).toBe('Swedish.');
    expect(resultMap.get('temp.')).toBe('temporal.');
    expect(resultMap.get('termin.')).toBe('termination.');
    expect(resultMap.get('Teut.')).toBe('Teutonic.');
    expect(resultMap.get('theol.')).toBe('theological, theologically.');
    expect(resultMap.get('trans.')).toBe('transitive.');
    expect(resultMap.get('transl.')).toBe('translation.');
    expect(resultMap.get('trisyl.')).toBe('trisyllabic.');
    expect(resultMap.get('Ulf.')).toBe('Ulfilas.');
    expect(resultMap.get('uncert.')).toBe('uncertain.');
    expect(resultMap.get('unclass.')).toBe('unclassical.');
    expect(resultMap.get('Ups. De la Gard.')).toBe('De la Garde’s collection of Icel. MSS. in Upsala.');
    expect(resultMap.get('v.')).toBe('vide.');
    expect(resultMap.get('viz.')).toBe('namely.');
    expect(resultMap.get('v. l.')).toBe('varia lectio.');
    expect(resultMap.get('Wolf.')).toBe('Wolfenbüttel.');
    expect(resultMap.get('þ.')).toBe('þáttr.');
  });
});
